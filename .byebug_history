exit
response.body
continue
response.body
params
continue
params[:start_date].to_i
params[:start_date]
params[:order_by]
params[:order]
continue
owed_interest.ceil.to_s
continue
owed_interest.ceil.to_i
continue
owed_interest.ceil.to_i
owed_interest.ceil
continue
owed_interest.ceil
owed_interest
continue
credit.reload.transactions[1].amount
exit
owed_interest.ceil
owed_interest.round
owed_interest
continue
owed_interest
continue
owed_interest
continue
owed_interest
continue
owed_interest
exit
credit.reload.transactions[1].amount
exit
credit1.reload.transactions[1]
credit1.reload.transactions.reload
credit1.reload.transactions.all.last
credit1.reload.transactions
credit1.reload
continue
credit1.reload.transactions
credit1.reload
Credit.first.transactions
Credit.first
Credit.all.count
Credit.all
credit1.transactions
credit1
continue
due_credit.transactions
due_credit
exit
credit1.transactions
credit1.balance.amount
continue
difference_from_credit_limit * (due_credit.apr/100) / 365 * difference_elapsed_day
difference_from_credit_limit = due_credit.credit_limit - current_balance
due_credit.credit_limit
current_balance
continue
difference_elapsed_day
continue
days[i+1]
exit
days[1]
days[0]
days
days[i]
i
days[i+1]
day
exit
daily_transactions._type
daily_transactions.type
daily_transactions.each do |day, i| puts day + ' ' + i end
i
daily_transactions.keys[0]
daily_transactions.keys[i]
daily_transactions.keys[i+1]
daily_transactions[daily_transactions.keys[i+1]].nil?
                        daily_transactions[daily_transactions.keys[i+1]].first.created_at.to_date
                        Date.today.to_date :
daily_transactions[daily_transactions.keys[i+1]].nil? ?
exit
daily_transactions[1]
daily_transactions[0]
daily_transactions.keys
exit
day.to_time.to_i - day_from
day.to_time.to_i
day.to_i
(day-day_from).to_time.to_i
(day-day_from).to_i
day-day_from
day_from
day
continue
daily_transactions[day]
continue
daily_transactions
transactions
continue
due_credit.balance.amount < due_credit.credit_limit
due_credit.balance
due_credit
exit
due_credit.balance.amount < due_credit.credit_limit
due_credit
exit
credit1.balance.amount
credit1.transactions
credit1
continue
(self.balance.amount - (transaction.amount * sign))
self.balance.amount
continue
(self.balance.amount + (transaction.amount * sign))
continue
(self.balance.amount + (transaction.amount * sign))
continue
(self.balance.amount + (BigDecimal.new(transaction.amount_was) * sign))
continue
BigDecimal.new(transaction.amount_was)
transaction.amount_was
continue
sign
self.balance.amount
continue
transaction.amount_was
transaction
continue
transaction.amount_was.to_i
transaction.amount_was
exit
exi
transaction.transactionable.balance.amount - transaction.amount - change
continue
transaction.transactionable.balance.amount - transaction.amount - change
continue
transaction.transactionable.balance.amount
transaction.transactionable.balance.amount - transaction.amount - change
continue
transaction.transactionable.balance.amount - transaction.amount - change
continue
transaction.transactionable.balance.amount - transaction.amount - change
continue
transaction.transactionable.balance.amount - transaction.amount - change
transaction.transactionable.amount - transaction.amount - change
continue
transaction.amount
transaction.transactionable.balance.amount
continue
transaction.transactionable.balance.amount
change
continue
User.all[1].credits[0].balance
User.all[1].credits[1].balance
User.all[1].credits.last.balance
User.all[1].credits.last
User.all[1].credits
User.all[1]
User.all[0]
User.all.count
User.all.first
User.all.last
User.last
User.last.credits
User.first
User.first.credits
@current_user
@current_user.credits.last
@current_user.credits.find("5a964043e24cebe98e00000b")
@current_user
transaction.transactionable
Credit.find("5a964043e24cebe98e00000b").trans
Credit.find("5a964043e24cebe98e00000b").transactions
Credit.find("5a964043e24cebe98e00000b")
Credit.find("5a964043e24cebe98e00000b").balance
transaction.transactionable.id_str
transaction.transactionable.balance.reload
transaction.transactionable.reload
transaction.transactionable.balance
transaction.transactionable
transaction
continue
Credit.all.last.balance
Credit.all.last
transaction.transactionable.balance
transaction.transactionable
continue
c.balance.amount.to_i
transaction.amount
params[:amount]
change
transaction.transactionable.balance.amount - change
c.balance.amount
c = Credit.find(transaction.transactionable.id_str)
transaction.transactionable.balance.amount
continue
BSON::ObjectId.new
ObjectId.new
ObjectId()
Credit.all.first.transactions.build(params, Charge).save!
Credit.all.first.transactions.build(params, Charge)
Credit.all.first.transactions.build!(params, Charge)
Credit.all.first.transactions.count
Credit.all.first.transactions.build(params, Charge)
Credit.all.first.transactions.count
Credit.all.first.transactions
Credit.all.first.transactions.build(params, Charge)
Credit.all.first.transactions.build(params)
Credit.all.first.transactions << Transaction.new({ status: 'succeeded' })
Credit.all.first.transactions << Transaction.new(params)
Credit.all.first.transactions << Charge.new(params)
Credit.all.first.transactions.new(params, Charge)
Credit.all.first.transactions.create({transaction_attributes: params}, Charge)
Credit.all.first.transactions.create(params, Charge)
Credit.all.first.transactions.create!(params, Charge)
Credit.all.first.create(params, Charge)
Charge.build(params)
Credit.build(params)
exit
Credit.all.first.transactions.new(params, Charge)
Credit.transactions.new(params, Charge)
Credit.transactions.new(params)
exit
Charge.create!(params)
Charge.new(params)
continue
transaction.amount <= self.balance.amount
exit
user.credits.first.balance.amount
exit
user.credits.first.balance.amount.to_i
user.credits.first.balance.amount
exit
user.credits.first.balance.amount
return false
transaction.amount
self.balance.amount
continue
transaction.amount <= self.balance.amount
transaction.amount
transaction.charge?
transaction
continue
sign
continue
before_balance.amount - rollback_value
before_balance
rollback_value
user.credits.first.transactions.last
curr_charge.last.amount
