continue
transaction
continue
transaction
continue
transaction
continue
transaction
continue
transaction
continue
transaction.transactionable.balance
transaction.transactionable
transaction
transcation
continue
(DateTime.now - 30.days).beginning_of_day.to_date
(DateTime.now - 30.days).beginning_of_day.to_date.to_i
(DateTime.now - 30.days).beginning_of_day.to_time.to_i
(DateTime.now - 30.days).beginning_of_day
DateTime.now - 30.days
(DateTime.now - 30.days).beginning_of_day.to_date.to_time.to_i
(DateTime.now - 30.days).to_date.to_time.beginning_of_day.to_i
(DateTime.now - 30.days).to_date.to_time.to_i
current_elapsed_day
next_elapsed_day
owed_interest.ceil
owed_interest
continue
credit.reload.transactions
credit.transactions
credit.transactions[1].amount
credit
exit
credit
charge1
credit.transactions
credit.reload
credit
exit
continue
exit
86400/3600
exit
86400/3600
daily_transactions[day].first.created_at.to_date.to_time.to_i - last_billing_statement
daily_transactions[day].first.created_at.to_date.to_time.to_i
last_billing_statement
exit
(DateTime.now - 30.days).to_date.to_time.to_i
(DateTime.now - 30.days).to_date.to_i
(Date.today - 30.days).to_time.to_i
(DateTime.now - 30.days).to_i
(Date.today - 29.days)
(Date.today - 30.days)
(Date.today - 30.days).to_date
(DateTime.today - 30.days).to_date
(DateTime.now - 30.days).to_date
daily_transactions[day].first.created_at.to_date
exit
continue
(day - day_from)/(24*3600)
continue
(day - day_from)/(24*3600)
exit
(day - day_from)/(24*3600)
exit
(day - day_from)/(24*3600)
last_billing_statement
exit
(Date.today - 30.days).to_date.to_time.to_i
last_billing_statement
86400/24/3600
day-day_from
exit
86400/24/3600
day-day_from
DateTime.strptime(day_from.to_s, '%s')
DateTime.strptime(dat_from.to_s, '%s')
DateTime.strptime(day.to_s,'%s')
DateTime.strptime(day,'%s')
DateTime.new(day)
day
exit
difference_elapsed_day
exit
difference_elapsed_day
difference_from_credit_limit
exit
owed_interest
exit
owed_interest
exit
response.body
continue
response.body
params
continue
params[:start_date].to_i
params[:start_date]
params[:order_by]
params[:order]
continue
owed_interest.ceil.to_s
continue
owed_interest.ceil.to_i
continue
owed_interest.ceil.to_i
owed_interest.ceil
continue
owed_interest.ceil
owed_interest
continue
credit.reload.transactions[1].amount
exit
owed_interest.ceil
owed_interest.round
owed_interest
continue
owed_interest
continue
owed_interest
continue
owed_interest
continue
owed_interest
exit
credit.reload.transactions[1].amount
exit
credit1.reload.transactions[1]
credit1.reload.transactions.reload
credit1.reload.transactions.all.last
credit1.reload.transactions
credit1.reload
continue
credit1.reload.transactions
credit1.reload
Credit.first.transactions
Credit.first
Credit.all.count
Credit.all
credit1.transactions
credit1
continue
due_credit.transactions
due_credit
exit
credit1.transactions
credit1.balance.amount
continue
difference_from_credit_limit * (due_credit.apr/100) / 365 * difference_elapsed_day
difference_from_credit_limit = due_credit.credit_limit - current_balance
due_credit.credit_limit
current_balance
continue
difference_elapsed_day
continue
days[i+1]
exit
days[1]
days[0]
days
days[i]
i
days[i+1]
day
exit
daily_transactions._type
daily_transactions.type
daily_transactions.each do |day, i| puts day + ' ' + i end
i
daily_transactions.keys[0]
daily_transactions.keys[i]
daily_transactions.keys[i+1]
daily_transactions[daily_transactions.keys[i+1]].nil?
                        daily_transactions[daily_transactions.keys[i+1]].first.created_at.to_date
                        Date.today.to_date :
daily_transactions[daily_transactions.keys[i+1]].nil? ?
exit
daily_transactions[1]
daily_transactions[0]
daily_transactions.keys
exit
day.to_time.to_i - day_from
day.to_time.to_i
day.to_i
(day-day_from).to_time.to_i
(day-day_from).to_i
day-day_from
day_from
day
continue
daily_transactions[day]
continue
daily_transactions
transactions
continue
due_credit.balance.amount < due_credit.credit_limit
due_credit.balance
due_credit
exit
due_credit.balance.amount < due_credit.credit_limit
due_credit
exit
credit1.balance.amount
credit1.transactions
credit1
continue
(self.balance.amount - (transaction.amount * sign))
self.balance.amount
continue
(self.balance.amount + (transaction.amount * sign))
continue
(self.balance.amount + (transaction.amount * sign))
continue
(self.balance.amount + (BigDecimal.new(transaction.amount_was) * sign))
continue
BigDecimal.new(transaction.amount_was)
transaction.amount_was
continue
sign
self.balance.amount
continue
transaction.amount_was
transaction
continue
transaction.amount_was.to_i
transaction.amount_was
exit
exi
transaction.transactionable.balance.amount - transaction.amount - change
continue
transaction.transactionable.balance.amount - transaction.amount - change
continue
transaction.transactionable.balance.amount
transaction.transactionable.balance.amount - transaction.amount - change
continue
transaction.transactionable.balance.amount - transaction.amount - change
continue
transaction.transactionable.balance.amount - transaction.amount - change
continue
transaction.transactionable.balance.amount - transaction.amount - change
transaction.transactionable.amount - transaction.amount - change
continue
transaction.amount
transaction.transactionable.balance.amount
continue
transaction.transactionable.balance.amount
change
continue
User.all[1].credits[0].balance
User.all[1].credits[1].balance
User.all[1].credits.last.balance
User.all[1].credits.last
User.all[1].credits
User.all[1]
